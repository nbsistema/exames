import { supabase, supabaseAdmin, UserProfile } from './supabase';

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  profile: UserProfile;
}

export const authService = {
  async createUser(email: string, name: string, profile: UserProfile): Promise<{ error: string | null }> {
    if (!supabase) {
      return { error: 'Supabase n√£o configurado' };
    }

    try {
      console.log('üë• Criando usu√°rio:', { email, name, profile });
      
      const normalizedEmail = email.trim().toLowerCase();
      
      // Valida√ß√µes b√°sicas
      if (!normalizedEmail || !name.trim() || !profile) {
        return { error: 'Todos os campos s√£o obrigat√≥rios' };
      }
      
      if (!normalizedEmail.includes('@')) {
        return { error: 'Email deve ter formato v√°lido' };
      }

      // Verificar se o usu√°rio j√° existe na tabela public.users
      try {
        const { data: existingUser } = await supabase
          .from('users')
          .select('email')
          .eq('email', normalizedEmail)
          .single();

        if (existingUser) {
          return { error: 'Este email j√° est√° cadastrado' };
        }
      } catch (error) {
        // Ignorar erro se a tabela n√£o existir ainda
        console.log('‚ÑπÔ∏è Tabela users pode n√£o existir ainda, continuando...');
      }

      // Tentar primeiro com Service Role Key se dispon√≠vel
      if (supabaseAdmin) {
        console.log('üîê Tentando criar usu√°rio com Service Role Key...');
        return await this.createUserWithAdmin(normalizedEmail, name, profile);
      } else {
        console.log('üîê Service Role Key n√£o dispon√≠vel, usando m√©todo p√∫blico...');
        return await this.createUserPublic(normalizedEmail, name, profile);
      }
      
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o do usu√°rio:', error);
      return { error: 'Erro interno do sistema' };
    }
  },

  async createUserWithAdmin(email: string, name: string, profile: UserProfile): Promise<{ error: string | null }> {
    try {
      console.log('üëë Criando usu√°rio com Admin API...');
      
      // 1. Criar usu√°rio no auth.users usando Service Role Key
      const { data: authUser, error: authError } = await supabaseAdmin!.auth.admin.createUser({
        email: email,
        password: 'nb@123',
        email_confirm: true,
        user_metadata: { 
          name: name, 
          profile 
        }
      });

      if (authError) {
        console.error('‚ùå Erro ao criar usu√°rio no auth:', authError);
        
        if (authError.message?.includes('User already registered')) {
          return { error: 'Este email j√° est√° cadastrado no sistema de autentica√ß√£o' };
        }
        
        return { error: `Erro na cria√ß√£o: ${authError.message}` };
      }

      if (!authUser?.user) {
        return { error: 'Erro: usu√°rio n√£o foi criado no sistema de autentica√ß√£o' };
      }

      console.log('‚úÖ Usu√°rio criado no auth.users:', authUser.user.id);

      // 2. Inserir na tabela public.users
      console.log('üìù Inserindo dados na tabela public.users...');
      const { error: insertError } = await supabase!
        .from('users')
        .insert({
          id: authUser.user.id,
          email: email,
          name: name,
          profile: profile,
        });
        
      if (insertError) {
        console.error('‚ùå Erro ao inserir na tabela users:', insertError);
        
        // Se falhou ao inserir na tabela, tentar remover o usu√°rio do auth
        try {
          await supabaseAdmin!.auth.admin.deleteUser(authUser.user.id);
          console.log('üßπ Usu√°rio removido do auth devido ao erro na tabela');
        } catch (cleanupError) {
          console.error('‚ùå Erro ao limpar usu√°rio do auth:', cleanupError);
        }
        
        return { error: `Erro ao criar perfil: ${insertError.message}` };
      }
      
      console.log('‚úÖ Dados inseridos na tabela public.users');
      return { error: null };
      
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o com admin:', error);
      return { error: 'Erro interno do sistema' };
    }
  },

  async createUserPublic(email: string, name: string, profile: UserProfile): Promise<{ error: string | null }> {
    try {
      console.log('üîì Criando usu√°rio com m√©todo p√∫blico...');
      
      // Fazer logout de qualquer sess√£o atual
      await supabase!.auth.signOut();
      await new Promise(resolve => setTimeout(resolve, 500));

      // Tentar criar usu√°rio usando signUp (m√©todo p√∫blico)
      const { data: authData, error: authError } = await supabase!.auth.signUp({
        email: email,
        password: 'nb@123',
        options: {
          data: { 
            name: name, 
            profile: profile 
          }
        }
      });

      if (authError) {
        console.error('‚ùå Erro ao criar usu√°rio via signUp:', authError);
        
        if (authError.message?.includes('User already registered')) {
          return { error: 'Este email j√° est√° cadastrado no sistema de autentica√ß√£o' };
        }
        
        if (authError.message?.includes('Database error')) {
          return { error: 'Erro de conex√£o com o banco de dados. Verifique a configura√ß√£o do Supabase.' };
        }
        
        return { error: `Erro na cria√ß√£o: ${authError.message}` };
      }

      if (!authData?.user) {
        return { error: 'Erro: usu√°rio n√£o foi criado no sistema de autentica√ß√£o' };
      }

      console.log('‚úÖ Usu√°rio criado via signUp:', authData.user.id);

      // Aguardar um pouco para garantir sincroniza√ß√£o
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Inserir na tabela public.users
      console.log('üìù Inserindo dados na tabela public.users...');
      const { error: insertError } = await supabase!
        .from('users')
        .insert({
          id: authData.user.id,
          email: email,
          name: name,
          profile: profile,
        });
        
      if (insertError) {
        console.error('‚ùå Erro ao inserir na tabela users:', insertError);
        console.warn('‚ö†Ô∏è Usu√°rio criado no auth mas falhou na tabela users');
        return { error: `Erro ao criar perfil: ${insertError.message}` };
      }
      
      console.log('‚úÖ Dados inseridos na tabela public.users');
      
      // Fazer logout do usu√°rio rec√©m-criado para n√£o interferir na sess√£o atual
      await supabase!.auth.signOut();
      
      return { error: null };
      
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o p√∫blica:', error);
      return { error: 'Erro interno do sistema' };
    }
  },

  async createFirstAdmin(email: string, name: string, password: string): Promise<{ error: string | null }> {
    if (!supabase) {
      return { error: 'Supabase n√£o configurado' };
    }

    try {
      console.log('üëë Criando primeiro administrador...');
      
      // Validar entrada
      if (!email || !name || !password) {
        return { error: 'Todos os campos s√£o obrigat√≥rios' };
      }
      
      if (!email.includes('@')) {
        return { error: 'Email deve ter formato v√°lido' };
      }
      
      if (password.length < 6) {
        return { error: 'Senha deve ter pelo menos 6 caracteres' };
      }
      
      const normalizedEmail = email.trim().toLowerCase();
      
      // Limpar sess√£o anterior
      await supabase.auth.signOut();
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Criar usu√°rio no Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: normalizedEmail,
        password,
        options: {
          data: { name, profile: 'admin' }
        }
      });

      console.log('üîç Resposta do SignUp:', { 
        hasUser: !!authData?.user, 
        hasSession: !!authData?.session,
        errorCode: authError?.status,
        errorMessage: authError?.message 
      });

      if (authError) {
        console.error('‚ùå Erro no SignUp:', authError);
        
        if (authError.message?.includes('User already registered')) {
          return { error: 'Este email j√° est√° cadastrado' };
        }
        
        if (authError.message?.includes('Database error')) {
          return { error: 'Erro de conex√£o com o banco de dados. Verifique a configura√ß√£o do Supabase.' };
        }
        
        return { error: authError.message };
      }

      if (authData?.user) {
        console.log('‚úÖ Admin criado no Auth:', authData.user.id);
        
        // Aguardar para garantir sincroniza√ß√£o
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Criar entrada na tabela users
        try {
          const { error: insertError } = await supabase
            .from('users')
            .insert({
              id: authData.user.id,
              email: normalizedEmail,
              name,
              profile: 'admin',
            });
            
          if (insertError) {
            console.error('‚ùå Erro ao inserir na tabela users:', insertError);
            
            // Tentar novamente ap√≥s mais tempo
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            const { error: retryError } = await supabase
              .from('users')
              .insert({
                id: authData.user.id,
                email: normalizedEmail,
                name,
                profile: 'admin',
              });
              
            if (retryError) {
              console.error('‚ùå Erro na segunda tentativa:', retryError);
              return { error: 'Erro ao criar perfil do administrador. Tente fazer login mesmo assim.' };
            }
          }
          
          console.log('‚úÖ Entrada criada na tabela users');
          return { error: null };
        } catch (insertError) {
          console.error('‚ùå Erro ao criar entrada na tabela users:', insertError);
          return { error: 'Erro ao criar perfil do administrador. Tente fazer login mesmo assim.' };
        }
      }
      
      return { error: 'Erro desconhecido ao criar administrador' };
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o do admin:', error);
      return { error: 'Erro interno do sistema' };
    }
  },
};