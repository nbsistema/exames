// Sistema de autentica√ß√£o via banco de dados
import { supabase, supabaseAdmin } from './supabase';
import { UserProfile } from './supabase';

export interface DatabaseUser {
  id: string;
  email: string;
  name: string;
  profile: UserProfile;
  password_hash: string;
  created_at: string;
  updated_at: string;
}

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  profile: UserProfile;
}

// Fun√ß√£o simples para hash de senha (em produ√ß√£o, use bcrypt ou similar)
function hashPassword(password: string): string {
  // Implementa√ß√£o simples - em produ√ß√£o use bcrypt
  return btoa(password + 'nb-salt-2025');
}

function verifyPassword(password: string, hash: string): boolean {
  return hashPassword(password) === hash;
}

export const databaseAuth = {
  // Fazer login via banco de dados
  async signIn(email: string, password: string): Promise<{ user: AuthUser | null; error: string | null }> {
    try {
      console.log('üîê Tentando login via banco de dados:', email);

      // Validar entrada
      if (!email || !password) {
        return { user: null, error: 'Email e senha s√£o obrigat√≥rios' };
      }

      const normalizedEmail = email.trim().toLowerCase();
      
      if (!normalizedEmail.includes('@')) {
        return { user: null, error: 'Email deve ter formato v√°lido' };
      }

      if (!supabase) {
        console.error('‚ùå Supabase n√£o configurado');
        return { user: null, error: 'Sistema n√£o configurado. Verifique as vari√°veis de ambiente.' };
      }

      // Primeiro, tentar buscar usu√°rio na tabela users (sistema novo)
      // Buscar usu√°rio na tabela users
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, email, name, profile, password_hash')
        .eq('email', normalizedEmail)
        .single();

      if (userError || !userData) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado na tabela users, tentando buscar usu√°rio do Supabase Auth...');
        
        // Se n√£o encontrou na tabela users, tentar buscar no auth.users via admin
        try {
          // Tentar fazer login via Supabase Auth para verificar credenciais
          const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
            email: normalizedEmail,
            password: password
          });
          
          if (authError || !authData.user) {
            console.log('‚ùå Credenciais inv√°lidas no Supabase Auth:', authError?.message);
            return { user: null, error: 'Email ou senha incorretos' };
          }
          
          console.log('‚úÖ Usu√°rio autenticado via Supabase Auth:', authData.user.email);
          
          // Migrar usu√°rio para a tabela users
          const userProfile = authData.user.user_metadata?.profile || 'checkup';
          const userName = authData.user.user_metadata?.name || authData.user.email?.split('@')[0] || 'Usu√°rio';
          
          console.log('üîÑ Migrando usu√°rio para tabela users...');
          
          // Criar hash da senha para salvar na tabela
          const passwordHash = hashPassword(password);
          
          const { error: insertError } = await supabase
            .from('users')
            .insert({
              id: authData.user.id,
              email: normalizedEmail,
              name: userName,
              profile: userProfile,
              password_hash: passwordHash,
            });
          
          if (insertError) {
            console.warn('‚ö†Ô∏è Erro ao migrar usu√°rio para tabela users:', insertError.message);
            // Continuar mesmo com erro de migra√ß√£o
          } else {
            console.log('‚úÖ Usu√°rio migrado com sucesso para tabela users');
          }
          
          // Fazer logout do Supabase Auth (n√£o queremos manter sess√£o l√°)
          await supabase.auth.signOut();
          
          const user: AuthUser = {
            id: authData.user.id,
            email: authData.user.email!,
            name: userName,
            profile: userProfile as UserProfile,
          };

          // Salvar no localStorage para manter sess√£o
          localStorage.setItem('nb-auth-user', JSON.stringify(user));
          localStorage.setItem('nb-auth-timestamp', Date.now().toString());

          return { user, error: null };
          
        } catch (authError) {
          console.log('‚ùå Erro na autentica√ß√£o via Supabase Auth:', authError);
          return { user: null, error: 'Email ou senha incorretos' };
        }
      }

      // Verificar se o usu√°rio tem password_hash
      if (!userData.password_hash) {
        console.log('‚ö†Ô∏è Usu√°rio sem senha definida na tabela, tentando autenticar via Supabase Auth...');
        
        // Tentar autenticar via Supabase Auth e definir senha
        try {
          const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
            email: normalizedEmail,
            password: password
          });
          
          if (authError || !authData.user) {
            return { user: null, error: 'Email ou senha incorretos' };
          }
          
          // Atualizar usu√°rio com hash da senha
          const passwordHash = hashPassword(password);
          
          const { error: updateError } = await supabase
            .from('users')
            .update({ password_hash: passwordHash })
            .eq('id', userData.id);
          
          if (updateError) {
            console.warn('‚ö†Ô∏è Erro ao atualizar senha do usu√°rio:', updateError.message);
          } else {
            console.log('‚úÖ Senha do usu√°rio atualizada com sucesso');
          }
          
          // Fazer logout do Supabase Auth
          await supabase.auth.signOut();
          
          const user: AuthUser = {
            id: userData.id,
            email: userData.email,
            name: userData.name,
            profile: userData.profile as UserProfile,
          };

          // Salvar no localStorage para manter sess√£o
          localStorage.setItem('nb-auth-user', JSON.stringify(user));
          localStorage.setItem('nb-auth-timestamp', Date.now().toString());

          return { user, error: null };
          
        } catch (authError) {
          return { user: null, error: 'Email ou senha incorretos' };
        }
      }
      
      // Verificar senha
      if (!verifyPassword(password, userData.password_hash)) {
        console.log('‚ùå Senha incorreta');
        return { user: null, error: 'Email ou senha incorretos' };
      }

      console.log('‚úÖ Login realizado com sucesso:', userData.email);

      const user: AuthUser = {
        id: userData.id,
        email: userData.email,
        name: userData.name,
        profile: userData.profile as UserProfile,
      };

      // Salvar no localStorage para manter sess√£o
      localStorage.setItem('nb-auth-user', JSON.stringify(user));
      localStorage.setItem('nb-auth-timestamp', Date.now().toString());

      return { user, error: null };
    } catch (error) {
      console.error('‚ùå Erro no login:', error);
      return { user: null, error: 'Erro interno do sistema. Verifique sua conex√£o com o banco de dados.' };
    }
  },

  // Criar usu√°rio no banco de dados
  async createUser(email: string, name: string, profile: UserProfile, password: string = 'nb@123'): Promise<{ error: string | null }> {
    try {
      if (!supabase) {
        return { error: 'Sistema n√£o configurado' };
      }

      console.log('üë• Criando usu√°rio no banco:', { email, name, profile });

      const normalizedEmail = email.trim().toLowerCase();

      // Verificar se usu√°rio j√° existe
      const { data: existingUser } = await supabase
        .from('users')
        .select('id')
        .eq('email', normalizedEmail)
        .single();

      if (existingUser) {
        return { error: 'Este email j√° est√° cadastrado no sistema' };
      }

      // Criar hash da senha
      const passwordHash = hashPassword(password);

      // Inserir usu√°rio na tabela
      const { error: insertError } = await supabase
        .from('users')
        .insert({
          id: self.crypto.randomUUID(),
          email: normalizedEmail,
          name: name.trim(),
          profile: profile,
          password_hash: passwordHash,
        });

      if (insertError) {
        console.error('‚ùå Erro ao inserir usu√°rio:', insertError);
        return { error: `Erro ao criar usu√°rio: ${insertError.message}` };
      }

      console.log('‚úÖ Usu√°rio criado com sucesso');
      return { error: null };
    } catch (error) {
      console.error('‚ùå Erro interno na cria√ß√£o:', error);
      return { error: 'Erro interno do sistema' };
    }
  },

  // Verificar se h√° usu√°rio logado
  getCurrentUser(): AuthUser | null {
    try {
      const userStr = localStorage.getItem('nb-auth-user');
      const timestamp = localStorage.getItem('nb-auth-timestamp');

      if (!userStr || !timestamp) {
        return null;
      }

      // Verificar se a sess√£o n√£o expirou (24 horas)
      const sessionAge = Date.now() - parseInt(timestamp);
      const maxAge = 24 * 60 * 60 * 1000; // 24 horas

      if (sessionAge > maxAge) {
        console.log('üïê Sess√£o expirada');
        this.signOut();
        return null;
      }

      return JSON.parse(userStr);
    } catch (error) {
      console.error('‚ùå Erro ao verificar usu√°rio atual:', error);
      return null;
    }
  },

  // Fazer logout
  signOut(): void {
    localStorage.removeItem('nb-auth-user');
    localStorage.removeItem('nb-auth-timestamp');
    console.log('üö™ Logout realizado');
  },

  // Criar primeiro admin
  async createFirstAdmin(email: string, name: string, password: string): Promise<{ error: string | null }> {
    try {
      if (!supabase) {
        return { error: 'Sistema n√£o configurado' };
      }

      console.log('üëë Criando primeiro administrador');

      // Verificar se j√° existe algum admin
      const { data: existingAdmin } = await supabase
        .from('users')
        .select('id')
        .eq('profile', 'admin')
        .limit(1);

      if (existingAdmin && existingAdmin.length > 0) {
        return { error: 'J√° existe um administrador no sistema' };
      }

      return await this.createUser(email, name, 'admin', password);
    } catch (error) {
      console.error('‚ùå Erro ao criar primeiro admin:', error);
      return { error: 'Erro interno do sistema' };
    }
  }
};